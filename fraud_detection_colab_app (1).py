# -*- coding: utf-8 -*-
"""Fraud_Detection_Colab_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRCLu2dJn8guf_A4M5yCnWD4ZP7qz657

# üïµÔ∏è‚Äç‚ôÇÔ∏è Fraud Detection Web App (Colab Version)
"""

!pip install streamlit
import hashlib
import sqlite3
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import streamlit as st
import os

# User Auth Logic
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def create_user_table():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT, role TEXT)")
    conn.commit()
    conn.close()

def add_user(username, password, role='analyst'):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT INTO users VALUES (?, ?, ?)", (username, hash_password(password), role))
    conn.commit()
    conn.close()

def verify_user(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username = ? AND password = ?",
              (username, hash_password(password)))
    data = c.fetchone()
    conn.close()
    return data

def train_model():
    os.makedirs("model", exist_ok=True)

    # Load dataset
    df = pd.read_csv("https://raw.githubusercontent.com/ninjakx/credit-card-fraud-detection/main/creditcard.csv")

    # Drop rows with any missing values
    df.dropna(inplace=True)

    # Features and target
    X = df.drop("Class", axis=1)
    y = df["Class"]

    # Train-test split
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

    # Train model
    from sklearn.ensemble import RandomForestClassifier
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)

    # Save model
    import joblib
    joblib.dump(model, "model/fraud_model.pkl")
    print("‚úÖ Model trained and saved to model/fraud_model.pkl")

# Train model using example credit card fraud dataset
def train_model():
    os.makedirs("model", exist_ok=True)
    df = pd.read_csv("creditcard_2023.csv")
    X = df.drop("Class", axis=1)
    y = df["Class"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)
    joblib.dump(model, "model/fraud_model.pkl")
    print("‚úÖ Model trained and saved to model/fraud_model.pkl")

train_model()

# Launchable Streamlit App Code
def run_app():
    st.title("üîê Login to Fraud Detection System")
    create_user_table()

    menu = ["Login", "Register"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Register":
        st.subheader("Create New Account")
        new_user = st.text_input("Username")
        new_pass = st.text_input("Password", type='password')
        if st.button("Register"):
            add_user(new_user, new_pass)
            st.success("User registered. Go to Login.")

    elif choice == "Login":
        st.subheader("Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type='password')
        if st.button("Login"):
            result = verify_user(username, password)
            if result:
                st.success(f"Welcome {username}")
                app_page()
            else:
                st.error("Invalid Credentials")

def app_page():
    st.title("üìä Fraud Detection Dashboard")
    st.markdown("Upload transaction CSV to scan for fraud.")
    uploaded = st.file_uploader("Upload CSV", type=["csv"])
    if uploaded:
        df = pd.read_csv(uploaded)
        model = joblib.load("model/fraud_model.pkl")
        preds = model.predict(df)
        df["Prediction"] = preds
        frauds = df[df["Prediction"] == 1]
        st.write(frauds)
        st.success(f"üö® {len(frauds)} fraudulent transactions detected.")

# üü¢ To run this app in Colab, save this cell as `app.py` and use `!streamlit run app.py`

code = '''
import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import joblib
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def create_user_table():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT, role TEXT)")
    conn.commit()
    conn.close()

def add_user(username, password, role="analyst"):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("INSERT INTO users VALUES (?, ?, ?)", (username, hash_password(password), role))
    conn.commit()
    conn.close()

def verify_user(username, password):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username = ? AND password = ?",
              (username, hash_password(password)))
    result = c.fetchone()
    conn.close()
    return result

def train_model():
    os.makedirs("model", exist_ok=True)
    df = pd.read_csv("https://raw.githubusercontent.com/ninjakx/credit-card-fraud-detection/main/creditcard.csv")
    df.dropna(inplace=True)
    X = df.drop("Class", axis=1)
    y = df["Class"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)
    joblib.dump(model, "model/fraud_model.pkl")
    print("‚úÖ Model trained and saved.")

def app_page():
    st.title("üìä Fraud Detection Dashboard")
    uploaded = st.file_uploader("Upload a CSV transaction file", type=["csv"])
    if uploaded:
        df = pd.read_csv(uploaded)
        model = joblib.load("model/fraud_model.pkl")
        preds = model.predict(df)
        df["Prediction"] = preds
        frauds = df[df["Prediction"] == 1]
        st.write(frauds)
        st.success(f"üö® {len(frauds)} fraudulent transactions detected.")

def main():
    st.title("üîê Login to Fraud Detection System")
    create_user_table()
    train_model()

    menu = ["Login", "Register"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Register":
        st.subheader("Create New Account")
        new_user = st.text_input("Username")
        new_pass = st.text_input("Password", type="password")
        if st.button("Register"):
            add_user(new_user, new_pass)
            st.success("User registered. You can now log in.")

    elif choice == "Login":
        st.subheader("Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        if st.button("Login"):
            if verify_user(username, password):
                st.success(f"Welcome {username}!")
                app_page()
            else:
                st.error("Incorrect username or password.")

if __name__ == "__main__":
    main()
'''

with open("app.py", "w") as f:
    f.write(code)